package com.dasi.bench;

import com.dasi.bench.helper.QueryConstants;
import com.dasi.bench.output.OutputController;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.LogRecord;

/**
 * @version 0.2.1
 * @author: Aleksander Wrobel
*/
final public class PoolVal {
  private static long testTime = 0;
  
  public static boolean sqlTest(Connection connection, boolean printResult, boolean printRowCount){	
	int rowCount 			= 0;
	int columnCount 		= 0;
	ResultSetMetaData metadata	= null;
	Statement statement		= null;
	ResultSet result		= null;
        boolean isFullSuccess = true;
        final ArrayList<String> queries = new ArrayList<>();
        {
            queries.add("SELECT_TEST");
            queries.add("INSTANCE_INFO");
            queries.add("ORDER_BY_TEST");
        }

	try{
		statement = connection.createStatement();
	}
	catch (SQLException e){
		OutputController.getControllerInstance().printMessage(new LogRecord(Level.SEVERE,"# FATAL - NO STATEMENT"));
		//e.printStackTrace();
		isFullSuccess = false;
	}

        boolean isQuery = false;
        Field[] fs = QueryConstants.class.getFields();
        
        for(Field f : fs){
                String sql = "";
                try {
                    sql = f.get(null).toString();
                    isQuery = queries.contains(f.getName());
                    //System.out.println(f.getName()+" : "+isQuery);
                  
                } catch (IllegalArgumentException | IllegalAccessException ex) {
                    OutputController.getControllerInstance().printMessage(new LogRecord(Level.SEVERE, ex.getLocalizedMessage()));
                }

                try{
                    result = executeSql(statement, isQuery, sql, f.getName());
                    OutputController.getControllerInstance().printMessage(new LogRecord(Level.INFO, "Executing: "+f.getName()));
                    //System.out.println(result);
                }catch (SQLException e){
                    OutputController.getControllerInstance().printMessage(new LogRecord(Level.SEVERE,"# FATAL - NOT A QUERY - "+f.getName()+" : "+e.getLocalizedMessage()));
                    //e.printStackTrace();
                    isFullSuccess = false;
                }
            if(isQuery){
                    try{
                        metadata = result.getMetaData();
                        columnCount = metadata.getColumnCount();
                        if(printResult) System.out.print(" > ");
                        while (result.next()){
                                rowCount++;
                                if(printResult){
                                        for(int i=1; i<=columnCount; i++){
                                                System.out.print(result.getString(i)+" ");
                                        }
                                        System.out.println();
                                }
                        }
                        if(printRowCount) System.out.println("Row count: "+rowCount);
                        rowCount=0;		
                    }catch (SQLException e){
                            OutputController.getControllerInstance().printMessage(new LogRecord(Level.SEVERE, "# FATAL - RESULT: "+e.getLocalizedMessage()));
                            isFullSuccess = false;
                    }
            }
            
            
        }
        return isFullSuccess;
  }	
  
  
  /** Usage of this method highly unrecommended as it should not work, but if it works in some way it can cause damages to database or break the software at runtime.
   * @deprecated
   * @author Aleksander Wrobel
   * @since 1.0
   */
          
  private static void connect() {//No longer needed, left just as a sample method. DO NOT USE.
	long startTime = System.nanoTime();
	long endTime = System.nanoTime();
	//Zmienne globalne
	
	Connection connection 		= null;

	startTime = System.nanoTime();
        

	//Duzy blok try, zeby moc dolozyc finally na koncu i zawsze domykac polaczenie	
	try {
		//Jesli polaczenie sie udalo to jedziemy z zapytaniami SQL
	        if (connection != null) {
			//Sprawdz ktory to nod pgpoola (inet_server_addr + inet_server_port) i ktory pgpool (inet_client_addr)
			//System.out.println("> Get current PostgreSQL instance information.");
			//sqlTest(connection, true,false,true,	"select * from inet_server_addr(), inet_server_port(), pg_backend_pid(), inet_client_addr(), inet_client_port();");
			//Stworz tabele
			//System.out.println("> Create test.");
			//sqlTest(connection, false,false,false, "CREATE TABLE test (id  integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, value   varchar(250));");
			//Wrzuc tyle danych ile obrotow petli for
			//System.out.println("> Insert test.");
			for (int i=0; i<1000; i++){
				//sqlTest(connection, false,false,false, "insert into test values ("+i+",'insertedValueNumber#"+i+"');");
			}
			//Selectnij wszystko
			//System.out.println("> Select test.");
			//sqlTest(connection, false,true,true,	"select * from test;");
			//Usun wszystko pojedynczymi sqlami
			//System.out.println("> Delete test.");
			for (int i=0; i<1000; i++){
				//sqlTest(connection, false,false,false, "delete from test where id="+i+";");
			}

			//TODO: Add update test.

			//Zdropuj baze danych czyszczac test
			//System.out.println("> Drop test.");
			//sqlTest(connection, false,false,false, "drop table test;");

		}
		else {
			//System.out.println("# FAIL [Connection]");
			return;
	        }
	}
	//Dodajemy na koniec zeby miec pewnosc ze polaczenie sie zamknie
	finally {	
		//Sprzatamy po sobie zamykajac polaczenie
		try{
			if(connection != null) connection.close();
		}
		catch (SQLException e){
			System.out.println("# FATAL - CONNECTION NOT CLOSED");
			e.printStackTrace();
			return;
		}
	}
	endTime = System.nanoTime();
	System.out.println("Full test time: "+(endTime - startTime)/1000000000.0 + "s"); 
  }

    private static ResultSet executeSql(Statement statement, boolean query, String sql, String type) throws SQLException {
        ResultSet result = null;
        int tests = 0;
        if(query){
            result = statement.executeQuery(sql);
        }else{
            if(type.equals("INSERT_TEST") || type.equals("DELETE_TEST") || type.equals("UPDATE_SELECT_RAND")){
                
                while(tests < 1000){
                    switch(type){
                        case "INSERT_TEST":
                            sql = QueryConstants.INSERT_TEST;
                            sql += tests+","+tests+");";
                            break;
                        case "DELETE_TEST":
                            sql = QueryConstants.DELETE_TEST;
                            sql += tests+";";
                            break;
                        case "UPDATE_SELECT_RAND":
                            sql = QueryConstants.UPDATE_SELECT_RAND;
                            sql += tests+"';";
                            break;
                    }
                    statement.executeUpdate(sql);
                    tests++;
                }
            }else{
                statement.executeUpdate(sql);
            }
        }
        return result;
    }
}
